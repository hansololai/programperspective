From the bomb.c code we can see that the main function calls phase_1,phase_2...  if any of the phase didn't pass, the bomb will explode. First we disassemble the binary into ELF format using objdump, 

objdump -d bomb (or mac, windows equivalent)

This will generate output in ELF format, I saved it in bomb.assembly file. The address start with 0x400xxx instead of 0x000000 because there are program headers. 

phase 1. Searching the <phase_1> 0x400ee0, in line 2, it moves the pointer 0x402400 to %esi, which is the first parameter for next function call <string_not_equal>. This obviously means it comparing user input with the string stored at location 0x402400. 
objdump -d does not output the static contents or symbals, using objdum -s to get the full content, (bomb.fullcontent), at location 0x402400, the string is "Border relations with Canada have never been better", the four 00000000 are string ending. 

 

 phase 2.  It starts with reserving 0x28 space(40 bytes) passing the input text in %rsi, then read_six_numbers function read these numbers and save the numbers
 in the stack. (which is pointed by %rsp the stack pointer).   at 400f01, it compare with the 1st number to 1. if passes, then it goes in a loop, 
 the loop is between 400f17-400f30.  everytime, the value i %eax is multiplied by 2 (400f1a) and compare to the next value. This indicates the number are 1 2 4 8 16...
 
 
 
phase 3. The sscanf function is called to get the number from the input text. The format string is located at 0x4025cf. Look at the bomb.full, we can see it's "%d %d",
so the input is two numbers. The commands in 400f6a and 400f6f are default case for a switch statement, with the range 0<=x<=7. If not, it will jump  to 400fad which explod the bomb
the value 0x8(%rsp), which is value of %rdx. (one of the number you entered). The coorsponding address for switch(x) are stored at 402470 in bomb.full:
0->400f7c, 1->400fb9, 2->400f83, 3->400f8a,etc... In each block, it simply copy a integer to %eax, then jump to fbe to compare with 0xc(%rsp), which is another number you entered. 
the number map is: 0->0xcf, 1->0x137, 2->0x2c3,3->0x100, 4->0x185,5->0xce,6->0x2aa, 7->0x147.  enter any of these combination would defuse the bomb.

phase 4. The start is similar to phase 3, input is a string for 2 numbers (x,y). Then it explode if x is not in range [0,14], then call function fun4(a,b,c). where a=x, b=0,c=14. Function 4 is a recursive function that try to find a set of b and c s.t. (b+c)/2=a. it recursivly calls itself with modified b and c. if (b+c)/2>a, then newc=(b+c)/2-1.  if (b+c)/2<a, then b=(b+c)/2+1. and %eax=0 if equal. A tricky part is after the func4 returns, the outter func4 set the return value %eax to %eax=%eax*2 if (b+c)/2>a, and %eax=%eax*2+1 if (b+c)/2<a. (in line 400fee and 401003). And the phase_4 expect the return of fun4 to be 0. (line 40104d, test command require %eax it be 0 to equal, jne will jump to explode if it is not 0). Therefore the fun4 need to return 0, which means it cannot reach a case where (b+c)/2<a. Basically (b+c)/2>a, then c=(b+c)/2-1, then (b+c)/2 must still >a, so on, eventually (b+c)/2=a. A simple solution would be x=7. The number y is very simple, at location 0xc(%rsp), the number is only used to compare to $0x0,(line 401051), so this number is 0. So answer is 7 0

     
phase 5. From 40107a we can see the string length is compared to $0x6, so string is length 6.  After the jump, rax set to 0, then a loop happened
between 40108b --4010ac. each time rax ++, until rax =6. In each loop, the code first get the character as a 8bit int.(40108b) then move it around, Note %cl is a last byte in %rcx, %dl is last byte in %rdx,
then this number is in %rdx, then mod 16 to make sure only last 4 bits are left. (from 0-15) then used as index to take a different character from a string x. This string is stored at 4024b0. (see 401099). 
This loop for 6 times, the processed string is stored in %rsp+16. At the end, called string_not_equal function, where %rdi is this string, %rsi points to 0x40245e. The string is "flyers". 
So to get these characters, from the x string we can get the index are: 9 15 14 5 6 7. These number, convert to character using ascII are special characters and stuff
but because it was mod 16, we can add 32 to them. So the index 41,47,46,37,38,39. correspond the string ")/.%&'"


phase 6. Start with read six numbers and put them all in address by %rsp. The same location got multiple pointers: %r13,%rsi,%r14. 
Step 1. A loop of r12d from 0 to 6. From 401114 to 401151. Inside the loop, first, it made sure every number, after substract 1 (40111b), is between 0 and 5, otherwise explode. then a small loop in second half. from 401135 to 40114b. This section go boom if the rest numbers are the same as the current one. 
Basically this whole loop ensures every number is unique and between 1 and 6. 

Step 2. Another loop of %rax from %rsp to %rsi, which equals to %rsp+24. (401160 to 40116d). So every number is substracted by 7, and restored at the same location. 

Step 3. This section also loops through each number and fill an array of 8 byte address located at %rsp+32. (401188). Each time %rsi is increased by 4, but when filling the array, it is multplied by 2. 
If the number is not greater than 1, then the address is 6032d0. otherwise it go through the static mapping located at 6032d0. This process is very tricky, 
It find the 8 byte data located at 6032d0+8, which is another address (6032e0), then use it to get data at 6032e0+8, which is 6032f0.. so on. 
Basically num -> address mapping is 1->6032d0, 2->6032e0,3->6032f0, 4->603300, 5->603310, 6->603320.  each address is 8 bytes and they are stored in %rsp+32, as same order as the number array. 

Step 4 starts from 4011ab. It is also a loop from %rsp+23 to %rsp+80, 6 in total. initially %rcx is the first value. 60xxxxx, then %rdx is the next value, and is saved at %rcx+8
the third value is saved at second value +8 and so on. The last value +8, is stored 0. 

Step 5. Starts at 4011da. %ebp =5, %rbx is the value at %rsp+32. Should be an address 60xxxx, Then %rax is the value located at 60xxxx+8. This %rax should be another address start with 60yyyy. 
Then the actual int value pointed by 60yyyy is stored at %eax
If the int value stored at location pointed by %rbx is less than the int value %eax, then explode. This process is also looped 5 times. 


Because all the int pointed by these 60xxxx address are static, these number and address are interleaved. x1,y1,x2,y2,x3,y3...where x are int values, y are addresses. 
The condition is for every x1, the number pointed by y1 must be smaller. The address order are:
6032d0,6032f0,603300,603310,603320,6032e0
