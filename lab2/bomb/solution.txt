From the bomb.c code we can see that the main function calls phase_1,phase_2...  if any of the phase didn't pass, the bomb will explode. First we disassemble the binary into ELF format using objdump, 

objdump -d bomb (or mac, windows equivalent)

This will generate output in ELF format, I saved it in bomb.assembly file. The address start with 0x400xxx instead of 0x000000 because there are program headers. 

phase 1. Searching the <phase_1> 0x400ee0, in line 2, it moves the pointer 0x402400 to %esi, which is the first parameter for next function call <string_not_equal>. This obviously means it comparing user input with the string stored at location 0x402400. 
objdump -d does not output the static contents or symbals, using objdum -s to get the full content, (bomb.fullcontent), at location 0x402400, the string is "Border relations with Canada have never been better", the four 00000000 are string ending. 

 

 phase 2.  It starts with reserving 0x28 space(40 bytes) passing the input text in %rsi, then read_six_numbers function read these numbers and save the numbers
 in the stack. (which is pointed by %rsp the stack pointer).   at 400f01, it compare with the 1st number to 1. if passes, then it goes in a loop, 
 the loop is between 400f17-400f30.  everytime, the value i %eax is multiplied by 2 (400f1a) and compare to the next value. This indicates the number are 1 2 4 8 16...
 
 
 
phase 3. The sscanf function is called to get the number from the input text. The format string is located at 0x4025cf. Look at the bomb.full, we can see it's "%d %d",
so the input is two numbers. The commands in 400f6a and 400f6f are default case for a switch statement, with the range 0<=x<=7. If not, it will jump  to 400fad which explod the bomb
the value 0x8(%rsp), which is value of %rdx. (one of the number you entered). The coorsponding address for switch(x) are stored at 402470 in bomb.full:
0->400f7c, 1->400fb9, 2->400f83, 3->400f8a,etc... In each block, it simply copy a integer to %eax, then jump to fbe to compare with 0xc(%rsp), which is another number you entered. 
the number map is: 0->0xcf, 1->0x137, 2->0x2c3,3->0x100, 4->0x185,5->0xce,6->0x2aa, 7->0x147.  enter any of these combination would defuse the bomb.

phase 4. The start is similar to phase 3, input is a string for 2 numbers (x,y). Then it explode if x is not in range [0,14], then call function fun4(a,b,c). where a=x, b=0,c=14. Function 4 is a recursive function that try to find a set of b and c s.t. (b+c)/2=a. it recursivly calls itself with modified b and c. if (b+c)/2>a, then newc=(b+c)/2-1.  if (b+c)/2<a, then b=(b+c)/2+1. and %eax=0 if equal. A tricky part is after the func4 returns, the outter func4 set the return value %eax to %eax=%eax*2 if (b+c)/2>a, and %eax=%eax*2+1 if (b+c)/2<a. (in line 400fee and 401003). And the phase_4 expect the return of fun4 to be 0. (line 40104d, test command require %eax it be 0 to equal, jne will jump to explode if it is not 0). Therefore the fun4 need to return 0, which means it cannot reach a case where (b+c)/2<a. Basically (b+c)/2>a, then c=(b+c)/2-1, then (b+c)/2 must still >a, so on, eventually (b+c)/2=a. A simple solution would be x=7. The number y is very simple, at location 0xc(%rsp), the number is only used to compare to $0x0,(line 401051), so this number is 0. So answer is 7 0

     
